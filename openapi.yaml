openapi: 3.1.0
info:
  title: Backend Toko API
  version: 0.2.0
paths:
  /health/live:
    get:
      summary: Liveness probe
      description: Returns OK when the API process is running.
      responses:
        '200':
          description: Service is running
  /health/ready:
    get:
      summary: Readiness probe
      description: Checks connectivity to critical dependencies such as the database and Redis.
      responses:
        '200':
          description: Ready for traffic
        '503':
          description: Dependencies unavailable
  /metrics:
    get:
      summary: Prometheus metrics
      description: Plaintext metrics in Prometheus exposition format for scraping.
      responses:
        '200':
          description: Metrics payload
          content:
            text/plain:
              schema:
                type: string
  /api/v1/auth/register:
    post:
      summary: Register
  /api/v1/auth/login:
    post:
      summary: Login
  /api/v1/auth/refresh:
    post:
      summary: Refresh access token via cookie
  /api/v1/auth/logout:
    post:
      summary: Logout and revoke refresh session
  /api/v1/auth/me:
    get:
      summary: Me
  /api/v1/auth/password/forgot:
    post:
      summary: Send password reset email
  /api/v1/auth/password/reset:
    post:
      summary: Reset password with token
  /api/v1/users/me/addresses:
    get:
      summary: List addresses
    post:
      summary: Create address
  /api/v1/users/me/addresses/{addressID}:
    patch:
      summary: Update address
    delete:
      summary: Delete address
  /api/v1/categories:
    get:
      summary: List categories
  /api/v1/brands:
    get:
      summary: List brands
  /api/v1/products:
    get:
      summary: List products
      parameters:
        - in: query
          name: q
          schema:
            type: string
        - in: query
          name: category
          schema:
            type: string
        - in: query
          name: brand
          schema:
            type: string
        - in: query
          name: minPrice
          schema:
            type: integer
        - in: query
          name: maxPrice
          schema:
            type: integer
        - in: query
          name: inStock
          schema:
            type: boolean
        - in: query
          name: sort
          schema:
            type: string
            enum:
              - price:asc
              - price:desc
              - title:asc
              - title:desc
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
  /api/v1/products/{slug}:
    get:
      summary: Product detail
  /api/v1/products/{slug}/related:
    get:
      summary: Related products
  /api/v1/carts:
    post:
      summary: Create cart (guest)
  /api/v1/carts/{id}:
    get:
      summary: Get cart by id
  /api/v1/carts/{id}/items:
    post:
      summary: Add item
  /api/v1/carts/{id}/items/{itemId}:
    patch:
      summary: Update qty
    delete:
      summary: Remove item
  /api/v1/carts/{id}/apply-voucher:
    post:
      summary: Apply voucher
  /api/v1/carts/{id}/voucher:
    delete:
      summary: Remove voucher
  /api/v1/carts/{id}/quote/shipping:
    post:
      summary: Shipping quote
  /api/v1/carts/{id}/quote/tax:
    post:
      summary: Tax quote
  /api/v1/carts/merge:
    post:
      summary: Merge guest cart into user cart
  /api/v1/checkout:
    post:
      summary: Create order (pending payment)
  /api/v1/orders:
    get:
      summary: List user orders
  /api/v1/orders/{orderId}:
    get:
      summary: Get order detail
  /api/v1/orders/{orderId}/cancel:
    post:
      summary: Cancel order if pending
  /api/v1/orders/{orderId}/shipment:
    get:
      summary: Get shipment detail for order
  /api/v1/admin/orders/{id}/shipment:
    post:
      summary: Create shipment for order
  /api/v1/admin/orders/{id}/status:
    patch:
      summary: Update order status (admin restricted)
  /api/v1/admin/vouchers:
    post:
      summary: Create voucher
  /api/v1/admin/vouchers/{code}:
    put:
      summary: Update voucher
  /api/v1/admin/vouchers/preview:
    post:
      summary: Preview voucher discount (dry-run)
  /api/v1/admin/webhooks:
    post:
      summary: Create webhook endpoint
    get:
      summary: List webhook endpoints
  /api/v1/admin/webhooks/{id}:
    put:
      summary: Update webhook endpoint
    delete:
      summary: Delete webhook endpoint
  /api/v1/admin/webhook-deliveries:
    get:
      summary: List webhook deliveries
  /api/v1/admin/webhook-deliveries/{id}/replay:
    post:
      summary: Replay a webhook delivery
  /api/v1/analytics/sales:
    get:
      summary: Sales trend (daily)
  /api/v1/analytics/top-products:
    get:
      summary: Top products by qty
  /api/v1/analytics/overview:
    get:
      summary: Overview for dashboard
  /api/v1/payments/intent:
    post:
      summary: Create payment intent (Midtrans/Xendit)
  /api/v1/webhooks/shipping/{courier}:
    post:
      summary: Shipping webhook receiver (idempotent)
  /api/v1/payments/{orderId}/status:
    get:
      summary: Get consolidated payment status
  /api/v1/webhooks/payment/{provider}:
    post:
      summary: Payment webhook receiver
components: {}
