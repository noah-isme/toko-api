openapi: 3.1.0
info:
  title: Backend Toko API
  version: 0.2.0
  description: |
    Backend for catalogue, checkout, and webhook flows.

    **SLOs**
    - Public HTTP endpoints: p95 latency < ${PERF_SLO_HTTP_P95_MS} ms (rolling 5 minutes), error rate < ${PERF_SLO_HTTP_ERROR_RATE}.
    - Webhook dispatch: p99 latency < ${PERF_SLO_WEBHOOK_P99_MS} ms.

    **Observability**
    - Prometheus metrics at `/metrics` (namespace `toko`).
    - Alert rules defined in `deploy/prometheus/alerts.yml`.
    - Grafana dashboards located in `deploy/grafana/dashboards/`.

    **Load Testing**
    - k6 scenarios under `perf/k6` with smoke/baseline guidance in `perf/README.md`.

    **Degradation Behaviour**
    - Payment and shipping circuits return HTTP 503 with standard error schema when breakers open.
    - Webhook retries back off and land in the DLQ once max attempts are exhausted.

paths:
  /health/live:
    get:
      summary: Liveness probe
      description: Returns OK when the API process is running.
      responses:
        '200':
          description: Service is running
  /health/ready:
    get:
      summary: Readiness probe
      description: Checks connectivity to critical dependencies such as the database and Redis.
      responses:
        '200':
          description: Ready for traffic
        '503':
          description: Dependencies unavailable
  /metrics:
    get:
      summary: Prometheus metrics
      description: Plaintext metrics in Prometheus exposition format for scraping.
      responses:
        '200':
          description: Metrics payload
          content:
            text/plain:
              schema:
                type: string
  /api/v1/auth/register:
    post:
      summary: Register
  /api/v1/auth/login:
    post:
      summary: Login
  /api/v1/auth/refresh:
    post:
      summary: Refresh access token via cookie
  /api/v1/auth/logout:
    post:
      summary: Logout and revoke refresh session
  /api/v1/auth/me:
    get:
      summary: Me
  /api/v1/auth/password/forgot:
    post:
      summary: Send password reset email
  /api/v1/auth/password/reset:
    post:
      summary: Reset password with token
  /api/v1/users/me/addresses:
    get:
      summary: List addresses
    post:
      summary: Create address
  /api/v1/users/me/addresses/{addressID}:
    patch:
      summary: Update address
    delete:
      summary: Delete address
  /api/v1/categories:
    get:
      summary: List categories
  /api/v1/brands:
    get:
      summary: List brands
  /api/v1/products:
    get:
      summary: List products
      parameters:
        - in: query
          name: q
          schema:
            type: string
        - in: query
          name: category
          schema:
            type: string
        - in: query
          name: brand
          schema:
            type: string
        - in: query
          name: minPrice
          schema:
            type: integer
        - in: query
          name: maxPrice
          schema:
            type: integer
        - in: query
          name: inStock
          schema:
            type: boolean
        - in: query
          name: sort
          schema:
            type: string
            enum:
              - price:asc
              - price:desc
              - title:asc
              - title:desc
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
  /api/v1/products/{slug}:
    get:
      summary: Product detail
  /api/v1/products/{slug}/related:
    get:
      summary: Related products
  /api/v1/carts:
    post:
      summary: Create cart (guest)
  /api/v1/carts/{id}:
    get:
      summary: Get cart by id
  /api/v1/carts/{id}/items:
    post:
      summary: Add item
  /api/v1/carts/{id}/items/{itemId}:
    patch:
      summary: Update qty
    delete:
      summary: Remove item
  /api/v1/carts/{id}/apply-voucher:
    post:
      summary: Apply voucher
  /api/v1/carts/{id}/voucher:
    delete:
      summary: Remove voucher
  /api/v1/carts/{id}/quote/shipping:
    post:
      summary: Shipping quote
  /api/v1/carts/{id}/quote/tax:
    post:
      summary: Tax quote
  /api/v1/carts/merge:
    post:
      summary: Merge guest cart into user cart
  /api/v1/checkout:
    post:
      summary: Create order (pending payment)
  /api/v1/orders:
    get:
      summary: List user orders
  /api/v1/orders/{orderId}:
    get:
      summary: Get order detail
  /api/v1/orders/{orderId}/cancel:
    post:
      summary: Cancel order if pending
  /api/v1/orders/{orderId}/shipment:
    get:
      summary: Get shipment detail for order
  /api/v1/admin/orders/{id}/shipment:
    post:
      summary: Create shipment for order
  /api/v1/admin/orders/{id}/status:
    patch:
      summary: Update order status (admin restricted)
  /api/v1/admin/vouchers:
    post:
      summary: Create voucher
  /api/v1/admin/vouchers/{code}:
    put:
      summary: Update voucher
  /api/v1/admin/vouchers/preview:
    post:
      summary: Preview voucher discount (dry-run)
  /api/v1/admin/webhooks:
    post:
      summary: Create webhook endpoint
    get:
      summary: List webhook endpoints
  /api/v1/admin/webhooks/{id}:
    put:
      summary: Update webhook endpoint
    delete:
      summary: Delete webhook endpoint
  /api/v1/admin/webhook-deliveries:
    get:
      summary: List webhook deliveries
  /api/v1/admin/webhook-deliveries/{id}/replay:
    post:
      summary: Replay a webhook delivery
  /api/v1/admin/queue/dlq:
    get:
      summary: List dead-letter queue items
      parameters:
        - name: kind
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
        - name: offset
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: DLQ entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminQueueDLQListResponse'
  /api/v1/admin/queue/dlq/replay:
    post:
      summary: Replay DLQ items
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminQueueReplayRequest'
      responses:
        '200':
          description: Replay result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminQueueReplayResponse'
  /api/v1/admin/queue/stats:
    get:
      summary: Queue depth and DLQ metrics
      parameters:
        - name: kind
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Queue stats
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminQueueStatsResponse'
  /api/v1/admin/audit-logs:
    get:
      summary: List audit logs (admin)
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
        - name: offset
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: OK
  /api/v1/analytics/sales:
    get:
      summary: Sales trend (daily)
  /api/v1/analytics/top-products:
    get:
      summary: Top products by qty
  /api/v1/analytics/overview:
    get:
      summary: Overview for dashboard
  /api/v1/payments/intent:
    post:
      summary: Create payment intent (Midtrans/Xendit)
  /api/v1/webhooks/shipping/{courier}:
    post:
      summary: Shipping webhook receiver (idempotent)
  /api/v1/payments/{orderId}/status:
    get:
      summary: Get consolidated payment status
  /api/v1/webhooks/payment/{provider}:
    post:
      summary: Payment webhook receiver
components:
  schemas:
    AdminQueueDLQItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        kind:
          type: string
        idempotencyKey:
          type: string
        attempts:
          type: integer
        lastError:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        message:
          type: object
          additionalProperties: true
    AdminQueueDLQListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AdminQueueDLQItem'
        total:
          type: integer
        kind:
          type: string
          nullable: true
    AdminQueueReplayRequest:
      type: object
      description: Provide a list of item IDs or a queue kind to replay.
      properties:
        ids:
          type: array
          items:
            type: string
            format: uuid
        kind:
          type: string
        limit:
          type: integer
          minimum: 1
      example:
        ids: []
        kind: webhook-delivery
        limit: 20
    AdminQueueReplayResponse:
      type: object
      properties:
        replayed:
          type: array
          items:
            type: string
            format: uuid
        failed:
          type: object
          additionalProperties:
            type: string
    AdminQueueStatsResponse:
      type: object
      properties:
        kind:
          type: string
        ready:
          type: integer
        processing:
          type: integer
        dlq:
          type: integer
        oldest_lag_ms:
          type: integer
        visibility_timeout:
          type: number
