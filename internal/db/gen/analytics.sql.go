// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: analytics.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getSalesDailyRange = `-- name: GetSalesDailyRange :many
SELECT day::timestamptz AS day,
       paid_orders,
       all_orders,
       COALESCE(revenue, 0) AS revenue
FROM mv_sales_daily
WHERE day >= $1::timestamptz
  AND day < $2::timestamptz
ORDER BY day ASC
`

type GetSalesDailyRangeParams struct {
	StartDate pgtype.Timestamptz `json:"start_date"`
	EndDate   pgtype.Timestamptz `json:"end_date"`
}

type GetSalesDailyRangeRow struct {
	Day        pgtype.Timestamptz `json:"day"`
	PaidOrders int64              `json:"paid_orders"`
	AllOrders  int64              `json:"all_orders"`
	Revenue    int64              `json:"revenue"`
}

func (q *Queries) GetSalesDailyRange(ctx context.Context, arg GetSalesDailyRangeParams) ([]GetSalesDailyRangeRow, error) {
	rows, err := q.db.Query(ctx, getSalesDailyRange, arg.StartDate, arg.EndDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSalesDailyRangeRow
	for rows.Next() {
		var i GetSalesDailyRangeRow
		if err := rows.Scan(
			&i.Day,
			&i.PaidOrders,
			&i.AllOrders,
			&i.Revenue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopProducts = `-- name: GetTopProducts :many
SELECT product_id, qty_sold, gross
FROM mv_top_products
ORDER BY qty_sold DESC
LIMIT $2 OFFSET $1
`

type GetTopProductsParams struct {
	OffsetRows int32 `json:"offset_rows"`
	LimitCount int32 `json:"limit_count"`
}

func (q *Queries) GetTopProducts(ctx context.Context, arg GetTopProductsParams) ([]MvTopProduct, error) {
	rows, err := q.db.Query(ctx, getTopProducts, arg.OffsetRows, arg.LimitCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MvTopProduct
	for rows.Next() {
		var i MvTopProduct
		if err := rows.Scan(&i.ProductID, &i.QtySold, &i.Gross); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const refreshSalesDaily = `-- name: RefreshSalesDaily :exec
REFRESH MATERIALIZED VIEW CONCURRENTLY mv_sales_daily
`

func (q *Queries) RefreshSalesDaily(ctx context.Context) error {
	_, err := q.db.Exec(ctx, refreshSalesDaily)
	return err
}

const refreshTopProducts = `-- name: RefreshTopProducts :exec
REFRESH MATERIALIZED VIEW CONCURRENTLY mv_top_products
`

func (q *Queries) RefreshTopProducts(ctx context.Context) error {
	_, err := q.db.Exec(ctx, refreshTopProducts)
	return err
}
