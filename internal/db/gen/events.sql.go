// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: events.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertDomainEvent = `-- name: InsertDomainEvent :one
INSERT INTO domain_events (topic, aggregate_id, payload)
VALUES ($1, $2, $3)
RETURNING id, topic, aggregate_id, payload, occurred_at
`

type InsertDomainEventParams struct {
	Topic       string      `json:"topic"`
	AggregateID pgtype.UUID `json:"aggregate_id"`
	Payload     []byte      `json:"payload"`
}

func (q *Queries) InsertDomainEvent(ctx context.Context, arg InsertDomainEventParams) (DomainEvent, error) {
	row := q.db.QueryRow(ctx, insertDomainEvent, arg.Topic, arg.AggregateID, arg.Payload)
	var i DomainEvent
	err := row.Scan(
		&i.ID,
		&i.Topic,
		&i.AggregateID,
		&i.Payload,
		&i.OccurredAt,
	)
	return i, err
}

const listDomainEventsByTopic = `-- name: ListDomainEventsByTopic :many
SELECT id, topic, aggregate_id, payload, occurred_at
FROM domain_events
WHERE topic = $1
ORDER BY occurred_at DESC
LIMIT $2 OFFSET $3
`

type ListDomainEventsByTopicParams struct {
	Topic  string `json:"topic"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListDomainEventsByTopic(ctx context.Context, arg ListDomainEventsByTopicParams) ([]DomainEvent, error) {
	rows, err := q.db.Query(ctx, listDomainEventsByTopic, arg.Topic, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DomainEvent
	for rows.Next() {
		var i DomainEvent
		if err := rows.Scan(
			&i.ID,
			&i.Topic,
			&i.AggregateID,
			&i.Payload,
			&i.OccurredAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
