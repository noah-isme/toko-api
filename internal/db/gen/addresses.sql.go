// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: addresses.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countAddressesByUser = `-- name: CountAddressesByUser :one
SELECT COUNT(*)
FROM addresses
WHERE user_id = $1
`

func (q *Queries) CountAddressesByUser(ctx context.Context, userID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countAddressesByUser, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAddress = `-- name: CreateAddress :one
INSERT INTO addresses (
    user_id,
    label,
    receiver_name,
    phone,
    country,
    province,
    city,
    postal_code,
    address_line1,
    address_line2,
    is_default
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11
)
RETURNING id, user_id, label, receiver_name, phone, country, province, city,
          postal_code, address_line1, address_line2, is_default, created_at, updated_at
`

type CreateAddressParams struct {
	UserID       pgtype.UUID `json:"user_id"`
	Label        pgtype.Text `json:"label"`
	ReceiverName pgtype.Text `json:"receiver_name"`
	Phone        pgtype.Text `json:"phone"`
	Country      pgtype.Text `json:"country"`
	Province     pgtype.Text `json:"province"`
	City         pgtype.Text `json:"city"`
	PostalCode   pgtype.Text `json:"postal_code"`
	AddressLine1 pgtype.Text `json:"address_line1"`
	AddressLine2 pgtype.Text `json:"address_line2"`
	IsDefault    bool        `json:"is_default"`
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (Address, error) {
	row := q.db.QueryRow(ctx, createAddress,
		arg.UserID,
		arg.Label,
		arg.ReceiverName,
		arg.Phone,
		arg.Country,
		arg.Province,
		arg.City,
		arg.PostalCode,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.IsDefault,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Label,
		&i.ReceiverName,
		&i.Phone,
		&i.Country,
		&i.Province,
		&i.City,
		&i.PostalCode,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAddress = `-- name: DeleteAddress :exec
DELETE FROM addresses
WHERE id = $1 AND user_id = $2
`

type DeleteAddressParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) DeleteAddress(ctx context.Context, arg DeleteAddressParams) error {
	_, err := q.db.Exec(ctx, deleteAddress, arg.ID, arg.UserID)
	return err
}

const getAddressByID = `-- name: GetAddressByID :one
SELECT id, user_id, label, receiver_name, phone, country, province, city,
       postal_code, address_line1, address_line2, is_default, created_at, updated_at
FROM addresses
WHERE id = $1 AND user_id = $2
LIMIT 1
`

type GetAddressByIDParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) GetAddressByID(ctx context.Context, arg GetAddressByIDParams) (Address, error) {
	row := q.db.QueryRow(ctx, getAddressByID, arg.ID, arg.UserID)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Label,
		&i.ReceiverName,
		&i.Phone,
		&i.Country,
		&i.Province,
		&i.City,
		&i.PostalCode,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAddressesByUser = `-- name: ListAddressesByUser :many
SELECT id, user_id, label, receiver_name, phone, country, province, city,
       postal_code, address_line1, address_line2, is_default, created_at, updated_at
FROM addresses
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListAddressesByUserParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) ListAddressesByUser(ctx context.Context, arg ListAddressesByUserParams) ([]Address, error) {
	rows, err := q.db.Query(ctx, listAddressesByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Address
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Label,
			&i.ReceiverName,
			&i.Phone,
			&i.Country,
			&i.Province,
			&i.City,
			&i.PostalCode,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unsetDefaultAddresses = `-- name: UnsetDefaultAddresses :exec
UPDATE addresses
SET is_default = FALSE,
    updated_at = now()
WHERE user_id = $1
  AND ($2::uuid IS NULL OR id <> $2)
  AND is_default
`

type UnsetDefaultAddressesParams struct {
	UserID    pgtype.UUID `json:"user_id"`
	ExcludeID pgtype.UUID `json:"exclude_id"`
}

func (q *Queries) UnsetDefaultAddresses(ctx context.Context, arg UnsetDefaultAddressesParams) error {
	_, err := q.db.Exec(ctx, unsetDefaultAddresses, arg.UserID, arg.ExcludeID)
	return err
}

const updateAddress = `-- name: UpdateAddress :one
UPDATE addresses
SET label         = $3,
    receiver_name = $4,
    phone         = $5,
    country       = $6,
    province      = $7,
    city          = $8,
    postal_code   = $9,
    address_line1 = $10,
    address_line2 = $11,
    is_default    = $12,
    updated_at    = now()
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, label, receiver_name, phone, country, province, city,
          postal_code, address_line1, address_line2, is_default, created_at, updated_at
`

type UpdateAddressParams struct {
	ID           pgtype.UUID `json:"id"`
	UserID       pgtype.UUID `json:"user_id"`
	Label        pgtype.Text `json:"label"`
	ReceiverName pgtype.Text `json:"receiver_name"`
	Phone        pgtype.Text `json:"phone"`
	Country      pgtype.Text `json:"country"`
	Province     pgtype.Text `json:"province"`
	City         pgtype.Text `json:"city"`
	PostalCode   pgtype.Text `json:"postal_code"`
	AddressLine1 pgtype.Text `json:"address_line1"`
	AddressLine2 pgtype.Text `json:"address_line2"`
	IsDefault    bool        `json:"is_default"`
}

func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) (Address, error) {
	row := q.db.QueryRow(ctx, updateAddress,
		arg.ID,
		arg.UserID,
		arg.Label,
		arg.ReceiverName,
		arg.Phone,
		arg.Country,
		arg.Province,
		arg.City,
		arg.PostalCode,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.IsDefault,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Label,
		&i.ReceiverName,
		&i.Phone,
		&i.Country,
		&i.Province,
		&i.City,
		&i.PostalCode,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
