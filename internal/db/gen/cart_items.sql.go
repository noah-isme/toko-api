// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: cart_items.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCartItem = `-- name: CreateCartItem :one
INSERT INTO cart_items (cart_id, product_id, variant_id, title, slug, qty, unit_price, subtotal)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, cart_id, product_id, variant_id, title, slug, qty, unit_price, subtotal
`

type CreateCartItemParams struct {
	CartID    pgtype.UUID `json:"cart_id"`
	ProductID pgtype.UUID `json:"product_id"`
	VariantID pgtype.UUID `json:"variant_id"`
	Title     string      `json:"title"`
	Slug      string      `json:"slug"`
	Qty       int32       `json:"qty"`
	UnitPrice int64       `json:"unit_price"`
	Subtotal  int64       `json:"subtotal"`
}

func (q *Queries) CreateCartItem(ctx context.Context, arg CreateCartItemParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, createCartItem,
		arg.CartID,
		arg.ProductID,
		arg.VariantID,
		arg.Title,
		arg.Slug,
		arg.Qty,
		arg.UnitPrice,
		arg.Subtotal,
	)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ProductID,
		&i.VariantID,
		&i.Title,
		&i.Slug,
		&i.Qty,
		&i.UnitPrice,
		&i.Subtotal,
	)
	return i, err
}

const deleteCartItem = `-- name: DeleteCartItem :exec
DELETE FROM cart_items
WHERE id = $1
  AND cart_id = $2
`

type DeleteCartItemParams struct {
	ID     pgtype.UUID `json:"id"`
	CartID pgtype.UUID `json:"cart_id"`
}

func (q *Queries) DeleteCartItem(ctx context.Context, arg DeleteCartItemParams) error {
	_, err := q.db.Exec(ctx, deleteCartItem, arg.ID, arg.CartID)
	return err
}

const findCartItemByProductVariant = `-- name: FindCartItemByProductVariant :one
SELECT id, cart_id, product_id, variant_id, title, slug, qty, unit_price, subtotal
FROM cart_items
WHERE cart_id = $1
  AND product_id = $2
  AND (variant_id IS NOT DISTINCT FROM $3)
LIMIT 1
`

type FindCartItemByProductVariantParams struct {
	CartID    pgtype.UUID `json:"cart_id"`
	ProductID pgtype.UUID `json:"product_id"`
	VariantID pgtype.UUID `json:"variant_id"`
}

func (q *Queries) FindCartItemByProductVariant(ctx context.Context, arg FindCartItemByProductVariantParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, findCartItemByProductVariant, arg.CartID, arg.ProductID, arg.VariantID)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ProductID,
		&i.VariantID,
		&i.Title,
		&i.Slug,
		&i.Qty,
		&i.UnitPrice,
		&i.Subtotal,
	)
	return i, err
}

const getCartItemByID = `-- name: GetCartItemByID :one
SELECT id, cart_id, product_id, variant_id, title, slug, qty, unit_price, subtotal
FROM cart_items
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCartItemByID(ctx context.Context, id pgtype.UUID) (CartItem, error) {
	row := q.db.QueryRow(ctx, getCartItemByID, id)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ProductID,
		&i.VariantID,
		&i.Title,
		&i.Slug,
		&i.Qty,
		&i.UnitPrice,
		&i.Subtotal,
	)
	return i, err
}

const listCartItems = `-- name: ListCartItems :many
SELECT id, cart_id, product_id, variant_id, title, slug, qty, unit_price, subtotal
FROM cart_items
WHERE cart_id = $1
ORDER BY title ASC, id
`

func (q *Queries) ListCartItems(ctx context.Context, cartID pgtype.UUID) ([]CartItem, error) {
	rows, err := q.db.Query(ctx, listCartItems, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CartItem
	for rows.Next() {
		var i CartItem
		if err := rows.Scan(
			&i.ID,
			&i.CartID,
			&i.ProductID,
			&i.VariantID,
			&i.Title,
			&i.Slug,
			&i.Qty,
			&i.UnitPrice,
			&i.Subtotal,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCartItemQty = `-- name: UpdateCartItemQty :one
UPDATE cart_items
SET qty = $2,
    subtotal = $3
WHERE id = $1
RETURNING id, cart_id, product_id, variant_id, title, slug, qty, unit_price, subtotal
`

type UpdateCartItemQtyParams struct {
	ID       pgtype.UUID `json:"id"`
	Qty      int32       `json:"qty"`
	Subtotal int64       `json:"subtotal"`
}

func (q *Queries) UpdateCartItemQty(ctx context.Context, arg UpdateCartItemQtyParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, updateCartItemQty, arg.ID, arg.Qty, arg.Subtotal)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ProductID,
		&i.VariantID,
		&i.Title,
		&i.Slug,
		&i.Qty,
		&i.UnitPrice,
		&i.Subtotal,
	)
	return i, err
}
