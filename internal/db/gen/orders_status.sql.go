// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: orders_status.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getOrderStatus = `-- name: GetOrderStatus :one
SELECT status FROM orders WHERE id = $1
`

func (q *Queries) GetOrderStatus(ctx context.Context, id pgtype.UUID) (OrderStatus, error) {
	row := q.db.QueryRow(ctx, getOrderStatus, id)
	var status OrderStatus
	err := row.Scan(&status)
	return status, err
}

const updateOrderStatusIfAllowed = `-- name: UpdateOrderStatusIfAllowed :one
UPDATE orders
SET status = $2,
    updated_at = now()
WHERE id = $1
  AND (
        (status = 'PENDING_PAYMENT' AND $2 IN ('PAID', 'CANCELED')) OR
        (status = 'PAID' AND $2 IN ('PACKED', 'CANCELED')) OR
        (status = 'PACKED' AND $2 = 'SHIPPED') OR
        (status = 'SHIPPED' AND $2 = 'OUT_FOR_DELIVERY') OR
        (status = 'OUT_FOR_DELIVERY' AND $2 = 'DELIVERED')
      )
RETURNING id
`

type UpdateOrderStatusIfAllowedParams struct {
	ID     pgtype.UUID `json:"id"`
	Status OrderStatus `json:"status"`
}

func (q *Queries) UpdateOrderStatusIfAllowed(ctx context.Context, arg UpdateOrderStatusIfAllowedParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, updateOrderStatusIfAllowed, arg.ID, arg.Status)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}
