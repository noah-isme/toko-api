// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: brands.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getBrandByID = `-- name: GetBrandByID :one
SELECT id, name, slug
FROM brands
WHERE id = $1
LIMIT 1
`

type GetBrandByIDRow struct {
	ID   pgtype.UUID `json:"id"`
	Name string      `json:"name"`
	Slug string      `json:"slug"`
}

func (q *Queries) GetBrandByID(ctx context.Context, id pgtype.UUID) (GetBrandByIDRow, error) {
	row := q.db.QueryRow(ctx, getBrandByID, id)
	var i GetBrandByIDRow
	err := row.Scan(&i.ID, &i.Name, &i.Slug)
	return i, err
}

const getBrandBySlug = `-- name: GetBrandBySlug :one
SELECT id, name, slug
FROM brands
WHERE slug = $1
LIMIT 1
`

type GetBrandBySlugRow struct {
	ID   pgtype.UUID `json:"id"`
	Name string      `json:"name"`
	Slug string      `json:"slug"`
}

func (q *Queries) GetBrandBySlug(ctx context.Context, slug string) (GetBrandBySlugRow, error) {
	row := q.db.QueryRow(ctx, getBrandBySlug, slug)
	var i GetBrandBySlugRow
	err := row.Scan(&i.ID, &i.Name, &i.Slug)
	return i, err
}

const listBrands = `-- name: ListBrands :many
SELECT id, name, slug
FROM brands
ORDER BY name ASC
`

type ListBrandsRow struct {
	ID   pgtype.UUID `json:"id"`
	Name string      `json:"name"`
	Slug string      `json:"slug"`
}

func (q *Queries) ListBrands(ctx context.Context) ([]ListBrandsRow, error) {
	rows, err := q.db.Query(ctx, listBrands)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBrandsRow
	for rows.Next() {
		var i ListBrandsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Slug); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
