// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tenant_vouchers.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getVoucherByTenant = `-- name: GetVoucherByTenant :one
SELECT id,
       code,
       value,
       kind,
       valid_to
FROM vouchers
WHERE tenant_id = $1
  AND code = $2
  AND (valid_to IS NULL OR valid_to > now())
LIMIT 1
`

type GetVoucherByTenantParams struct {
	TenantID pgtype.UUID `json:"tenant_id"`
	Code     string      `json:"code"`
}

type GetVoucherByTenantRow struct {
	ID      pgtype.UUID        `json:"id"`
	Code    string             `json:"code"`
	Value   int64              `json:"value"`
	Kind    DiscountKind       `json:"kind"`
	ValidTo pgtype.Timestamptz `json:"valid_to"`
}

func (q *Queries) GetVoucherByTenant(ctx context.Context, arg GetVoucherByTenantParams) (GetVoucherByTenantRow, error) {
	row := q.db.QueryRow(ctx, getVoucherByTenant, arg.TenantID, arg.Code)
	var i GetVoucherByTenantRow
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Value,
		&i.Kind,
		&i.ValidTo,
	)
	return i, err
}
