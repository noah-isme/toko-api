// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: audit.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertAuditLog = `-- name: InsertAuditLog :one
INSERT INTO audit_logs (
    actor_kind,
    actor_user_id,
    action,
    resource_type,
    resource_id,
    method,
    path,
    route,
    status,
    ip,
    user_agent,
    request_id,
    metadata
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13
) RETURNING id, created_at
`

type InsertAuditLogParams struct {
	ActorKind    interface{} `json:"actor_kind"`
	ActorUserID  pgtype.UUID `json:"actor_user_id"`
	Action       string      `json:"action"`
	ResourceType string      `json:"resource_type"`
	ResourceID   pgtype.Text `json:"resource_id"`
	Method       string      `json:"method"`
	Path         string      `json:"path"`
	Route        pgtype.Text `json:"route"`
	Status       int32       `json:"status"`
	Ip           pgtype.Text `json:"ip"`
	UserAgent    pgtype.Text `json:"user_agent"`
	RequestID    pgtype.Text `json:"request_id"`
	Metadata     []byte      `json:"metadata"`
}

type InsertAuditLogRow struct {
	ID        pgtype.UUID        `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) InsertAuditLog(ctx context.Context, arg InsertAuditLogParams) (InsertAuditLogRow, error) {
	row := q.db.QueryRow(ctx, insertAuditLog,
		arg.ActorKind,
		arg.ActorUserID,
		arg.Action,
		arg.ResourceType,
		arg.ResourceID,
		arg.Method,
		arg.Path,
		arg.Route,
		arg.Status,
		arg.Ip,
		arg.UserAgent,
		arg.RequestID,
		arg.Metadata,
	)
	var i InsertAuditLogRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const listAuditLogs = `-- name: ListAuditLogs :many
SELECT
    id,
    actor_kind,
    actor_user_id,
    action,
    resource_type,
    resource_id,
    method,
    path,
    route,
    status,
    ip,
    user_agent,
    request_id,
    metadata,
    created_at
FROM audit_logs
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListAuditLogsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAuditLogs(ctx context.Context, arg ListAuditLogsParams) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, listAuditLogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuditLog
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.ActorKind,
			&i.ActorUserID,
			&i.Action,
			&i.ResourceType,
			&i.ResourceID,
			&i.Method,
			&i.Path,
			&i.Route,
			&i.Status,
			&i.Ip,
			&i.UserAgent,
			&i.RequestID,
			&i.Metadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
