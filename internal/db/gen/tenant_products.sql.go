// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tenant_products.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getProductDetailByTenant = `-- name: GetProductDetailByTenant :one
SELECT id,
       slug,
       title,
       price,
       in_stock
FROM products
WHERE tenant_id = $1
  AND slug = $2
LIMIT 1
`

type GetProductDetailByTenantParams struct {
	TenantID pgtype.UUID `json:"tenant_id"`
	Slug     string      `json:"slug"`
}

type GetProductDetailByTenantRow struct {
	ID      pgtype.UUID `json:"id"`
	Slug    string      `json:"slug"`
	Title   string      `json:"title"`
	Price   int64       `json:"price"`
	InStock bool        `json:"in_stock"`
}

func (q *Queries) GetProductDetailByTenant(ctx context.Context, arg GetProductDetailByTenantParams) (GetProductDetailByTenantRow, error) {
	row := q.db.QueryRow(ctx, getProductDetailByTenant, arg.TenantID, arg.Slug)
	var i GetProductDetailByTenantRow
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.Price,
		&i.InStock,
	)
	return i, err
}

const listProductsByTenant = `-- name: ListProductsByTenant :many
SELECT id,
       slug,
       title,
       price,
       in_stock
FROM products
WHERE tenant_id = $1
ORDER BY id
LIMIT $3 OFFSET $2
`

type ListProductsByTenantParams struct {
	TenantID    pgtype.UUID `json:"tenant_id"`
	OffsetValue int32       `json:"offset_value"`
	LimitValue  int32       `json:"limit_value"`
}

type ListProductsByTenantRow struct {
	ID      pgtype.UUID `json:"id"`
	Slug    string      `json:"slug"`
	Title   string      `json:"title"`
	Price   int64       `json:"price"`
	InStock bool        `json:"in_stock"`
}

func (q *Queries) ListProductsByTenant(ctx context.Context, arg ListProductsByTenantParams) ([]ListProductsByTenantRow, error) {
	rows, err := q.db.Query(ctx, listProductsByTenant, arg.TenantID, arg.OffsetValue, arg.LimitValue)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListProductsByTenantRow
	for rows.Next() {
		var i ListProductsByTenantRow
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Title,
			&i.Price,
			&i.InStock,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
