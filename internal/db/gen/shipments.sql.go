// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: shipments.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createShipment = `-- name: CreateShipment :one
INSERT INTO shipments (order_id, status, courier, tracking_number, history, last_status, last_event_at)
VALUES ($1, 'PENDING', $2, $3, '[]'::jsonb, 'PENDING', now())
RETURNING id, order_id, status, courier, tracking_number, history, last_status, last_event_at
`

type CreateShipmentParams struct {
	OrderID        pgtype.UUID `json:"order_id"`
	Courier        pgtype.Text `json:"courier"`
	TrackingNumber pgtype.Text `json:"tracking_number"`
}

func (q *Queries) CreateShipment(ctx context.Context, arg CreateShipmentParams) (Shipment, error) {
	row := q.db.QueryRow(ctx, createShipment, arg.OrderID, arg.Courier, arg.TrackingNumber)
	var i Shipment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Status,
		&i.Courier,
		&i.TrackingNumber,
		&i.History,
		&i.LastStatus,
		&i.LastEventAt,
	)
	return i, err
}

const getShipmentByOrder = `-- name: GetShipmentByOrder :one
SELECT id, order_id, status, courier, tracking_number, history, last_status, last_event_at
FROM shipments
WHERE order_id = $1
LIMIT 1
`

func (q *Queries) GetShipmentByOrder(ctx context.Context, orderID pgtype.UUID) (Shipment, error) {
	row := q.db.QueryRow(ctx, getShipmentByOrder, orderID)
	var i Shipment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Status,
		&i.Courier,
		&i.TrackingNumber,
		&i.History,
		&i.LastStatus,
		&i.LastEventAt,
	)
	return i, err
}

const insertShipmentEvent = `-- name: InsertShipmentEvent :one
INSERT INTO shipment_events (shipment_id, status, description, location, occurred_at, raw_payload)
VALUES ($1, $2, $3, $4, COALESCE($5::timestamptz, now()), $6)
RETURNING id, shipment_id, status, description, location, occurred_at, raw_payload, created_at
`

type InsertShipmentEventParams struct {
	ShipmentID  pgtype.UUID        `json:"shipment_id"`
	Status      ShipmentStatus     `json:"status"`
	Description pgtype.Text        `json:"description"`
	Location    pgtype.Text        `json:"location"`
	OccurredAt  pgtype.Timestamptz `json:"occurred_at"`
	RawPayload  []byte             `json:"raw_payload"`
}

func (q *Queries) InsertShipmentEvent(ctx context.Context, arg InsertShipmentEventParams) (ShipmentEvent, error) {
	row := q.db.QueryRow(ctx, insertShipmentEvent,
		arg.ShipmentID,
		arg.Status,
		arg.Description,
		arg.Location,
		arg.OccurredAt,
		arg.RawPayload,
	)
	var i ShipmentEvent
	err := row.Scan(
		&i.ID,
		&i.ShipmentID,
		&i.Status,
		&i.Description,
		&i.Location,
		&i.OccurredAt,
		&i.RawPayload,
		&i.CreatedAt,
	)
	return i, err
}

const listShipmentEvents = `-- name: ListShipmentEvents :many
SELECT id, shipment_id, status, description, location, occurred_at, raw_payload, created_at
FROM shipment_events
WHERE shipment_id = $1
ORDER BY occurred_at ASC, created_at ASC
`

func (q *Queries) ListShipmentEvents(ctx context.Context, shipmentID pgtype.UUID) ([]ShipmentEvent, error) {
	rows, err := q.db.Query(ctx, listShipmentEvents, shipmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShipmentEvent
	for rows.Next() {
		var i ShipmentEvent
		if err := rows.Scan(
			&i.ID,
			&i.ShipmentID,
			&i.Status,
			&i.Description,
			&i.Location,
			&i.OccurredAt,
			&i.RawPayload,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShipmentStatus = `-- name: UpdateShipmentStatus :one
UPDATE shipments
SET status = $2,
    last_status = $2,
    last_event_at = now()
WHERE id = $1
RETURNING id
`

type UpdateShipmentStatusParams struct {
	ID     pgtype.UUID    `json:"id"`
	Status ShipmentStatus `json:"status"`
}

func (q *Queries) UpdateShipmentStatus(ctx context.Context, arg UpdateShipmentStatusParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, updateShipmentStatus, arg.ID, arg.Status)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}
