// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: payments.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (
    order_id,
    provider,
    channel,
    status,
    provider_payload,
    intent_token,
    redirect_url,
    amount,
    created_at,
    updated_at,
    expires_at
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, now(), now(), $9)
RETURNING id, order_id, provider, status, provider_payload, created_at, updated_at, channel, intent_token, redirect_url, amount,
         expires_at
`

type CreatePaymentParams struct {
	OrderID         pgtype.UUID        `json:"order_id"`
	Provider        pgtype.Text        `json:"provider"`
	Channel         pgtype.Text        `json:"channel"`
	Status          PaymentStatus      `json:"status"`
	ProviderPayload []byte             `json:"provider_payload"`
	IntentToken     pgtype.Text        `json:"intent_token"`
	RedirectUrl     pgtype.Text        `json:"redirect_url"`
	Amount          pgtype.Int8        `json:"amount"`
	ExpiresAt       pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, createPayment,
		arg.OrderID,
		arg.Provider,
		arg.Channel,
		arg.Status,
		arg.ProviderPayload,
		arg.IntentToken,
		arg.RedirectUrl,
		arg.Amount,
		arg.ExpiresAt,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Provider,
		&i.Status,
		&i.ProviderPayload,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Channel,
		&i.IntentToken,
		&i.RedirectUrl,
		&i.Amount,
		&i.ExpiresAt,
	)
	return i, err
}

const getLatestPaymentByOrder = `-- name: GetLatestPaymentByOrder :one
SELECT id, order_id, provider, status, provider_payload, created_at, updated_at, channel, intent_token, redirect_url, amount,
       expires_at
FROM payments
WHERE order_id = $1
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLatestPaymentByOrder(ctx context.Context, orderID pgtype.UUID) (Payment, error) {
	row := q.db.QueryRow(ctx, getLatestPaymentByOrder, orderID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Provider,
		&i.Status,
		&i.ProviderPayload,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Channel,
		&i.IntentToken,
		&i.RedirectUrl,
		&i.Amount,
		&i.ExpiresAt,
	)
	return i, err
}

const insertPaymentEvent = `-- name: InsertPaymentEvent :exec
INSERT INTO payment_events (payment_id, status, payload)
VALUES ($1, $2, $3)
`

type InsertPaymentEventParams struct {
	PaymentID pgtype.UUID   `json:"payment_id"`
	Status    PaymentStatus `json:"status"`
	Payload   []byte        `json:"payload"`
}

func (q *Queries) InsertPaymentEvent(ctx context.Context, arg InsertPaymentEventParams) error {
	_, err := q.db.Exec(ctx, insertPaymentEvent, arg.PaymentID, arg.Status, arg.Payload)
	return err
}

const updatePaymentStatus = `-- name: UpdatePaymentStatus :exec
UPDATE payments
SET status = $2,
    provider_payload = $3,
    updated_at = now()
WHERE id = $1
`

type UpdatePaymentStatusParams struct {
	ID              pgtype.UUID   `json:"id"`
	Status          PaymentStatus `json:"status"`
	ProviderPayload []byte        `json:"provider_payload"`
}

func (q *Queries) UpdatePaymentStatus(ctx context.Context, arg UpdatePaymentStatusParams) error {
	_, err := q.db.Exec(ctx, updatePaymentStatus, arg.ID, arg.Status, arg.ProviderPayload)
	return err
}
