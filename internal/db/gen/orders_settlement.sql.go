// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: orders_settlement.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const decrementVariantStock = `-- name: DecrementVariantStock :exec
UPDATE product_variants
SET stock = GREATEST(0, stock - $1)
WHERE id = $2
`

type DecrementVariantStockParams struct {
	Qty int32       `json:"qty"`
	ID  pgtype.UUID `json:"id"`
}

func (q *Queries) DecrementVariantStock(ctx context.Context, arg DecrementVariantStockParams) error {
	_, err := q.db.Exec(ctx, decrementVariantStock, arg.Qty, arg.ID)
	return err
}

const incrementVoucherUsageByCode = `-- name: IncrementVoucherUsageByCode :exec
UPDATE vouchers
SET used_count = used_count + 1
WHERE code = $1
  AND (usage_limit IS NULL OR used_count < usage_limit)
`

func (q *Queries) IncrementVoucherUsageByCode(ctx context.Context, code string) error {
	_, err := q.db.Exec(ctx, incrementVoucherUsageByCode, code)
	return err
}

const listOrderItemsForStock = `-- name: ListOrderItemsForStock :many
SELECT product_id, variant_id, qty, slug
FROM order_items
WHERE order_id = $1
`

type ListOrderItemsForStockRow struct {
	ProductID pgtype.UUID `json:"product_id"`
	VariantID pgtype.UUID `json:"variant_id"`
	Qty       int32       `json:"qty"`
	Slug      string      `json:"slug"`
}

func (q *Queries) ListOrderItemsForStock(ctx context.Context, orderID pgtype.UUID) ([]ListOrderItemsForStockRow, error) {
	rows, err := q.db.Query(ctx, listOrderItemsForStock, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListOrderItemsForStockRow
	for rows.Next() {
		var i ListOrderItemsForStockRow
		if err := rows.Scan(&i.ProductID, &i.VariantID, &i.Qty, &i.Slug); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
