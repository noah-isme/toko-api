// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: orders.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countOrdersForUser = `-- name: CountOrdersForUser :one
SELECT COUNT(*)
FROM orders
WHERE user_id = $1
`

func (q *Queries) CountOrdersForUser(ctx context.Context, userID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countOrdersForUser, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (user_id, cart_id, status, currency, pricing_subtotal, pricing_discount, pricing_tax, pricing_shipping, pricing_total, shipping_address, shipping_option, notes)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
RETURNING id, user_id, cart_id, status, currency, pricing_subtotal, pricing_discount, pricing_tax, pricing_shipping, pricing_total, shipping_address, shipping_option, notes, created_at, updated_at
`

type CreateOrderParams struct {
	UserID          pgtype.UUID `json:"user_id"`
	CartID          pgtype.UUID `json:"cart_id"`
	Status          OrderStatus `json:"status"`
	Currency        string      `json:"currency"`
	PricingSubtotal int64       `json:"pricing_subtotal"`
	PricingDiscount int64       `json:"pricing_discount"`
	PricingTax      int64       `json:"pricing_tax"`
	PricingShipping int64       `json:"pricing_shipping"`
	PricingTotal    int64       `json:"pricing_total"`
	ShippingAddress []byte      `json:"shipping_address"`
	ShippingOption  []byte      `json:"shipping_option"`
	Notes           pgtype.Text `json:"notes"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.UserID,
		arg.CartID,
		arg.Status,
		arg.Currency,
		arg.PricingSubtotal,
		arg.PricingDiscount,
		arg.PricingTax,
		arg.PricingShipping,
		arg.PricingTotal,
		arg.ShippingAddress,
		arg.ShippingOption,
		arg.Notes,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CartID,
		&i.Status,
		&i.Currency,
		&i.PricingSubtotal,
		&i.PricingDiscount,
		&i.PricingTax,
		&i.PricingShipping,
		&i.PricingTotal,
		&i.ShippingAddress,
		&i.ShippingOption,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createOrderItem = `-- name: CreateOrderItem :exec
INSERT INTO order_items (order_id, product_id, variant_id, title, slug, qty, unit_price, subtotal)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type CreateOrderItemParams struct {
	OrderID   pgtype.UUID `json:"order_id"`
	ProductID pgtype.UUID `json:"product_id"`
	VariantID pgtype.UUID `json:"variant_id"`
	Title     string      `json:"title"`
	Slug      string      `json:"slug"`
	Qty       int32       `json:"qty"`
	UnitPrice int64       `json:"unit_price"`
	Subtotal  int64       `json:"subtotal"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) error {
	_, err := q.db.Exec(ctx, createOrderItem,
		arg.OrderID,
		arg.ProductID,
		arg.VariantID,
		arg.Title,
		arg.Slug,
		arg.Qty,
		arg.UnitPrice,
		arg.Subtotal,
	)
	return err
}

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (order_id, provider, status, provider_payload)
VALUES ($1, $2, $3, $4)
RETURNING id, order_id, provider, status, provider_payload, created_at, updated_at
`

type CreatePaymentParams struct {
	OrderID         pgtype.UUID   `json:"order_id"`
	Provider        pgtype.Text   `json:"provider"`
	Status          PaymentStatus `json:"status"`
	ProviderPayload []byte        `json:"provider_payload"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, createPayment,
		arg.OrderID,
		arg.Provider,
		arg.Status,
		arg.ProviderPayload,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Provider,
		&i.Status,
		&i.ProviderPayload,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderByIDForUser = `-- name: GetOrderByIDForUser :one
SELECT id, user_id, cart_id, status, currency, pricing_subtotal, pricing_discount, pricing_tax, pricing_shipping, pricing_total, shipping_address, shipping_option, notes, created_at, updated_at
FROM orders
WHERE id = $1 AND user_id = $2
LIMIT 1
`

type GetOrderByIDForUserParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) GetOrderByIDForUser(ctx context.Context, arg GetOrderByIDForUserParams) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderByIDForUser, arg.ID, arg.UserID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CartID,
		&i.Status,
		&i.Currency,
		&i.PricingSubtotal,
		&i.PricingDiscount,
		&i.PricingTax,
		&i.PricingShipping,
		&i.PricingTotal,
		&i.ShippingAddress,
		&i.ShippingOption,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrderItemsByOrder = `-- name: ListOrderItemsByOrder :many
SELECT id, order_id, product_id, variant_id, title, slug, qty, unit_price, subtotal
FROM order_items
WHERE order_id = $1
ORDER BY title ASC, id
`

func (q *Queries) ListOrderItemsByOrder(ctx context.Context, orderID pgtype.UUID) ([]OrderItem, error) {
	rows, err := q.db.Query(ctx, listOrderItemsByOrder, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductID,
			&i.VariantID,
			&i.Title,
			&i.Slug,
			&i.Qty,
			&i.UnitPrice,
			&i.Subtotal,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrdersForUser = `-- name: ListOrdersForUser :many
SELECT id, user_id, cart_id, status, currency, pricing_subtotal, pricing_discount, pricing_tax, pricing_shipping, pricing_total, shipping_address, shipping_option, notes, created_at, updated_at
FROM orders
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListOrdersForUserParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) ListOrdersForUser(ctx context.Context, arg ListOrdersForUserParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrdersForUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CartID,
			&i.Status,
			&i.Currency,
			&i.PricingSubtotal,
			&i.PricingDiscount,
			&i.PricingTax,
			&i.PricingShipping,
			&i.PricingTotal,
			&i.ShippingAddress,
			&i.ShippingOption,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE orders
SET status = $2,
    updated_at = now()
WHERE id = $1
`

type UpdateOrderStatusParams struct {
	ID     pgtype.UUID `json:"id"`
	Status OrderStatus `json:"status"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.Exec(ctx, updateOrderStatus, arg.ID, arg.Status)
	return err
}
