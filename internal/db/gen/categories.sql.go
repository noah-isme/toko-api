// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: categories.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getCategoryByID = `-- name: GetCategoryByID :one
SELECT id, name, slug, parent_id
FROM categories
WHERE id = $1
LIMIT 1
`

type GetCategoryByIDRow struct {
	ID       pgtype.UUID `json:"id"`
	Name     string      `json:"name"`
	Slug     string      `json:"slug"`
	ParentID pgtype.UUID `json:"parent_id"`
}

func (q *Queries) GetCategoryByID(ctx context.Context, id pgtype.UUID) (GetCategoryByIDRow, error) {
	row := q.db.QueryRow(ctx, getCategoryByID, id)
	var i GetCategoryByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.ParentID,
	)
	return i, err
}

const getCategoryBySlug = `-- name: GetCategoryBySlug :one
SELECT id, name, slug, parent_id
FROM categories
WHERE slug = $1
LIMIT 1
`

type GetCategoryBySlugRow struct {
	ID       pgtype.UUID `json:"id"`
	Name     string      `json:"name"`
	Slug     string      `json:"slug"`
	ParentID pgtype.UUID `json:"parent_id"`
}

func (q *Queries) GetCategoryBySlug(ctx context.Context, slug string) (GetCategoryBySlugRow, error) {
	row := q.db.QueryRow(ctx, getCategoryBySlug, slug)
	var i GetCategoryBySlugRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.ParentID,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, name, slug, parent_id
FROM categories
ORDER BY name ASC
`

type ListCategoriesRow struct {
	ID       pgtype.UUID `json:"id"`
	Name     string      `json:"name"`
	Slug     string      `json:"slug"`
	ParentID pgtype.UUID `json:"parent_id"`
}

func (q *Queries) ListCategories(ctx context.Context) ([]ListCategoriesRow, error) {
	rows, err := q.db.Query(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCategoriesRow
	for rows.Next() {
		var i ListCategoriesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.ParentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
