// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: vouchers.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getVoucherByCode = `-- name: GetVoucherByCode :one
SELECT id, code, value, min_spend, usage_limit, used_count, valid_from, valid_to, product_ids, category_ids, created_at, updated_at, kind, percent_bps, combinable, priority, per_user_limit, brand_ids
FROM vouchers
WHERE code = $1
LIMIT 1
`

func (q *Queries) GetVoucherByCode(ctx context.Context, code string) (Voucher, error) {
	row := q.db.QueryRow(ctx, getVoucherByCode, code)
	var i Voucher
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Value,
		&i.MinSpend,
		&i.UsageLimit,
		&i.UsedCount,
		&i.ValidFrom,
		&i.ValidTo,
		&i.ProductIds,
		&i.CategoryIds,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Kind,
		&i.PercentBps,
		&i.Combinable,
		&i.Priority,
		&i.PerUserLimit,
		&i.BrandIds,
	)
	return i, err
}

const increaseVoucherUsedCount = `-- name: IncreaseVoucherUsedCount :exec
UPDATE vouchers
SET used_count = used_count + 1,
    updated_at = now()
WHERE id = $1
  AND (usage_limit IS NULL OR used_count < usage_limit)
`

func (q *Queries) IncreaseVoucherUsedCount(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, increaseVoucherUsedCount, id)
	return err
}
