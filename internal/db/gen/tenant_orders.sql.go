// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tenant_orders.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getOrderByTenant = `-- name: GetOrderByTenant :one
SELECT id,
       user_id,
       status,
       created_at
FROM orders
WHERE tenant_id = $1
  AND id = $2
LIMIT 1
`

type GetOrderByTenantParams struct {
	TenantID pgtype.UUID `json:"tenant_id"`
	ID       pgtype.UUID `json:"id"`
}

type GetOrderByTenantRow struct {
	ID        pgtype.UUID        `json:"id"`
	UserID    pgtype.UUID        `json:"user_id"`
	Status    OrderStatus        `json:"status"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetOrderByTenant(ctx context.Context, arg GetOrderByTenantParams) (GetOrderByTenantRow, error) {
	row := q.db.QueryRow(ctx, getOrderByTenant, arg.TenantID, arg.ID)
	var i GetOrderByTenantRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listOrdersByTenant = `-- name: ListOrdersByTenant :many
SELECT id,
       user_id,
       status,
       created_at
FROM orders
WHERE tenant_id = $1
  AND ($2 IS NULL OR status = $2)
ORDER BY created_at DESC
LIMIT $4 OFFSET $3
`

type ListOrdersByTenantParams struct {
	TenantID    pgtype.UUID `json:"tenant_id"`
	Status      interface{} `json:"status"`
	OffsetValue int32       `json:"offset_value"`
	LimitValue  int32       `json:"limit_value"`
}

type ListOrdersByTenantRow struct {
	ID        pgtype.UUID        `json:"id"`
	UserID    pgtype.UUID        `json:"user_id"`
	Status    OrderStatus        `json:"status"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) ListOrdersByTenant(ctx context.Context, arg ListOrdersByTenantParams) ([]ListOrdersByTenantRow, error) {
	rows, err := q.db.Query(ctx, listOrdersByTenant,
		arg.TenantID,
		arg.Status,
		arg.OffsetValue,
		arg.LimitValue,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListOrdersByTenantRow
	for rows.Next() {
		var i ListOrdersByTenantRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
