// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: sessions.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (user_id, refresh_token, user_agent, ip, expires_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, refresh_token, user_agent, ip, expires_at, created_at
`

type CreateSessionParams struct {
	UserID       pgtype.UUID        `json:"user_id"`
	RefreshToken string             `json:"refresh_token"`
	UserAgent    pgtype.Text        `json:"user_agent"`
	Ip           pgtype.Text        `json:"ip"`
	ExpiresAt    pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.UserID,
		arg.RefreshToken,
		arg.UserAgent,
		arg.Ip,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.Ip,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSessionByToken = `-- name: DeleteSessionByToken :exec
DELETE FROM sessions
WHERE refresh_token = $1
`

func (q *Queries) DeleteSessionByToken(ctx context.Context, refreshToken string) error {
	_, err := q.db.Exec(ctx, deleteSessionByToken, refreshToken)
	return err
}

const deleteSessionsByUser = `-- name: DeleteSessionsByUser :exec
DELETE FROM sessions
WHERE user_id = $1
`

func (q *Queries) DeleteSessionsByUser(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteSessionsByUser, userID)
	return err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT id, user_id, refresh_token, user_agent, ip, expires_at, created_at
FROM sessions
WHERE refresh_token = $1
LIMIT 1
`

func (q *Queries) GetSessionByToken(ctx context.Context, refreshToken string) (Session, error) {
        row := q.db.QueryRow(ctx, getSessionByToken, refreshToken)
        var i Session
        err := row.Scan(
                &i.ID,
                &i.UserID,
                &i.RefreshToken,
                &i.UserAgent,
                &i.Ip,
                &i.ExpiresAt,
                &i.CreatedAt,
        )
        return i, err
}

const rotateSessionToken = `-- name: RotateSessionToken :one
UPDATE sessions
SET refresh_token = $2,
    expires_at    = $3
WHERE id = $1
RETURNING id, user_id, refresh_token, user_agent, ip, expires_at, created_at
`

type RotateSessionTokenParams struct {
        ID           pgtype.UUID        `json:"id"`
        RefreshToken string             `json:"refresh_token"`
        ExpiresAt    pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) RotateSessionToken(ctx context.Context, arg RotateSessionTokenParams) (Session, error) {
        row := q.db.QueryRow(ctx, rotateSessionToken, arg.ID, arg.RefreshToken, arg.ExpiresAt)
        var i Session
        err := row.Scan(
                &i.ID,
                &i.UserID,
                &i.RefreshToken,
                &i.UserAgent,
                &i.Ip,
                &i.ExpiresAt,
                &i.CreatedAt,
        )
        return i, err
}
