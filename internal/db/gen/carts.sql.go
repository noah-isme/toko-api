// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: carts.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCart = `-- name: CreateCart :one
INSERT INTO carts (user_id, anon_id, expires_at)
VALUES ($1, $2, $3)
RETURNING id, user_id, anon_id, applied_voucher_code, created_at, updated_at, expires_at
`

type CreateCartParams struct {
	UserID    pgtype.UUID        `json:"user_id"`
	AnonID    pgtype.Text        `json:"anon_id"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreateCart(ctx context.Context, arg CreateCartParams) (Cart, error) {
	row := q.db.QueryRow(ctx, createCart, arg.UserID, arg.AnonID, arg.ExpiresAt)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AnonID,
		&i.AppliedVoucherCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getActiveCartByAnon = `-- name: GetActiveCartByAnon :one
SELECT id, user_id, anon_id, applied_voucher_code, created_at, updated_at, expires_at
FROM carts
WHERE anon_id = $1 AND (expires_at IS NULL OR expires_at > now())
ORDER BY updated_at DESC
LIMIT 1
`

func (q *Queries) GetActiveCartByAnon(ctx context.Context, anonID pgtype.Text) (Cart, error) {
	row := q.db.QueryRow(ctx, getActiveCartByAnon, anonID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AnonID,
		&i.AppliedVoucherCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getActiveCartByUser = `-- name: GetActiveCartByUser :one
SELECT id, user_id, anon_id, applied_voucher_code, created_at, updated_at, expires_at
FROM carts
WHERE user_id = $1 AND (expires_at IS NULL OR expires_at > now())
ORDER BY updated_at DESC
LIMIT 1
`

func (q *Queries) GetActiveCartByUser(ctx context.Context, userID pgtype.UUID) (Cart, error) {
	row := q.db.QueryRow(ctx, getActiveCartByUser, userID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AnonID,
		&i.AppliedVoucherCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getCartByID = `-- name: GetCartByID :one
SELECT id, user_id, anon_id, applied_voucher_code, created_at, updated_at, expires_at
FROM carts
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCartByID(ctx context.Context, id pgtype.UUID) (Cart, error) {
	row := q.db.QueryRow(ctx, getCartByID, id)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AnonID,
		&i.AppliedVoucherCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const touchCart = `-- name: TouchCart :exec
UPDATE carts
SET updated_at = now(),
    expires_at = $2
WHERE id = $1
`

type TouchCartParams struct {
	ID        pgtype.UUID        `json:"id"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) TouchCart(ctx context.Context, arg TouchCartParams) error {
	_, err := q.db.Exec(ctx, touchCart, arg.ID, arg.ExpiresAt)
	return err
}

const transferCartToUser = `-- name: TransferCartToUser :exec
UPDATE carts
SET user_id = $2,
    anon_id = NULL,
    updated_at = now()
WHERE id = $1
`

type TransferCartToUserParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) TransferCartToUser(ctx context.Context, arg TransferCartToUserParams) error {
	_, err := q.db.Exec(ctx, transferCartToUser, arg.ID, arg.UserID)
	return err
}

const updateCartVoucher = `-- name: UpdateCartVoucher :exec
UPDATE carts
SET applied_voucher_code = $2,
    updated_at = now()
WHERE id = $1
`

type UpdateCartVoucherParams struct {
	ID                 pgtype.UUID `json:"id"`
	AppliedVoucherCode pgtype.Text `json:"applied_voucher_code"`
}

func (q *Queries) UpdateCartVoucher(ctx context.Context, arg UpdateCartVoucherParams) error {
	_, err := q.db.Exec(ctx, updateCartVoucher, arg.ID, arg.AppliedVoucherCode)
	return err
}
