// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package dbgen

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type DeliveryStatus string

const (
	DeliveryStatusPENDING    DeliveryStatus = "PENDING"
	DeliveryStatusDELIVERING DeliveryStatus = "DELIVERING"
	DeliveryStatusDELIVERED  DeliveryStatus = "DELIVERED"
	DeliveryStatusFAILED     DeliveryStatus = "FAILED"
	DeliveryStatusDLQ        DeliveryStatus = "DLQ"
)

func (e *DeliveryStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DeliveryStatus(s)
	case string:
		*e = DeliveryStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for DeliveryStatus: %T", src)
	}
	return nil
}

type NullDeliveryStatus struct {
	DeliveryStatus DeliveryStatus `json:"delivery_status"`
	Valid          bool           `json:"valid"` // Valid is true if DeliveryStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDeliveryStatus) Scan(value interface{}) error {
	if value == nil {
		ns.DeliveryStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DeliveryStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDeliveryStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DeliveryStatus), nil
}

type DiscountKind string

const (
	DiscountKindFixedAmount DiscountKind = "fixed_amount"
	DiscountKindPercent     DiscountKind = "percent"
)

func (e *DiscountKind) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DiscountKind(s)
	case string:
		*e = DiscountKind(s)
	default:
		return fmt.Errorf("unsupported scan type for DiscountKind: %T", src)
	}
	return nil
}

type NullDiscountKind struct {
	DiscountKind DiscountKind `json:"discount_kind"`
	Valid        bool         `json:"valid"` // Valid is true if DiscountKind is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDiscountKind) Scan(value interface{}) error {
	if value == nil {
		ns.DiscountKind, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DiscountKind.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDiscountKind) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DiscountKind), nil
}

type OrderStatus string

const (
	OrderStatusPENDINGPAYMENT OrderStatus = "PENDING_PAYMENT"
	OrderStatusPAID           OrderStatus = "PAID"
	OrderStatusPACKED         OrderStatus = "PACKED"
	OrderStatusSHIPPED        OrderStatus = "SHIPPED"
	OrderStatusOUTFORDELIVERY OrderStatus = "OUT_FOR_DELIVERY"
	OrderStatusDELIVERED      OrderStatus = "DELIVERED"
	OrderStatusCANCELED       OrderStatus = "CANCELED"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus `json:"order_status"`
	Valid       bool        `json:"valid"` // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

type PaymentStatus string

const (
	PaymentStatusPENDING  PaymentStatus = "PENDING"
	PaymentStatusPAID     PaymentStatus = "PAID"
	PaymentStatusFAILED   PaymentStatus = "FAILED"
	PaymentStatusEXPIRED  PaymentStatus = "EXPIRED"
	PaymentStatusREFUNDED PaymentStatus = "REFUNDED"
)

func (e *PaymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentStatus(s)
	case string:
		*e = PaymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentStatus: %T", src)
	}
	return nil
}

type NullPaymentStatus struct {
	PaymentStatus PaymentStatus `json:"payment_status"`
	Valid         bool          `json:"valid"` // Valid is true if PaymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentStatus), nil
}

type ShipmentStatus string

const (
	ShipmentStatusPENDING        ShipmentStatus = "PENDING"
	ShipmentStatusPICKED         ShipmentStatus = "PICKED"
	ShipmentStatusINTRANSIT      ShipmentStatus = "IN_TRANSIT"
	ShipmentStatusSHIPPED        ShipmentStatus = "SHIPPED"
	ShipmentStatusOUTFORDELIVERY ShipmentStatus = "OUT_FOR_DELIVERY"
	ShipmentStatusDELIVERED      ShipmentStatus = "DELIVERED"
	ShipmentStatusRETURNED       ShipmentStatus = "RETURNED"
)

func (e *ShipmentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ShipmentStatus(s)
	case string:
		*e = ShipmentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ShipmentStatus: %T", src)
	}
	return nil
}

type NullShipmentStatus struct {
	ShipmentStatus ShipmentStatus `json:"shipment_status"`
	Valid          bool           `json:"valid"` // Valid is true if ShipmentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullShipmentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ShipmentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ShipmentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullShipmentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ShipmentStatus), nil
}

type Address struct {
	ID           pgtype.UUID        `json:"id"`
	UserID       pgtype.UUID        `json:"user_id"`
	Label        pgtype.Text        `json:"label"`
	ReceiverName pgtype.Text        `json:"receiver_name"`
	Phone        pgtype.Text        `json:"phone"`
	Country      pgtype.Text        `json:"country"`
	Province     pgtype.Text        `json:"province"`
	City         pgtype.Text        `json:"city"`
	PostalCode   pgtype.Text        `json:"postal_code"`
	AddressLine1 pgtype.Text        `json:"address_line1"`
	AddressLine2 pgtype.Text        `json:"address_line2"`
	IsDefault    bool               `json:"is_default"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

type Brand struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Slug      string             `json:"slug"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type Cart struct {
	ID                 pgtype.UUID        `json:"id"`
	UserID             pgtype.UUID        `json:"user_id"`
	AnonID             pgtype.Text        `json:"anon_id"`
	AppliedVoucherCode pgtype.Text        `json:"applied_voucher_code"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
	UpdatedAt          pgtype.Timestamptz `json:"updated_at"`
	ExpiresAt          pgtype.Timestamptz `json:"expires_at"`
}

type CartItem struct {
	ID        pgtype.UUID `json:"id"`
	CartID    pgtype.UUID `json:"cart_id"`
	ProductID pgtype.UUID `json:"product_id"`
	VariantID pgtype.UUID `json:"variant_id"`
	Title     string      `json:"title"`
	Slug      string      `json:"slug"`
	Qty       int32       `json:"qty"`
	UnitPrice int64       `json:"unit_price"`
	Subtotal  int64       `json:"subtotal"`
}

type Category struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Slug      string             `json:"slug"`
	ParentID  pgtype.UUID        `json:"parent_id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type DomainEvent struct {
	ID          pgtype.UUID        `json:"id"`
	Topic       string             `json:"topic"`
	AggregateID pgtype.UUID        `json:"aggregate_id"`
	Payload     []byte             `json:"payload"`
	OccurredAt  pgtype.Timestamptz `json:"occurred_at"`
}

type MvSalesDaily struct {
	Day        pgtype.Interval `json:"day"`
	PaidOrders int64           `json:"paid_orders"`
	Revenue    int64           `json:"revenue"`
	AllOrders  int64           `json:"all_orders"`
}

type MvTopProduct struct {
	ProductID pgtype.UUID `json:"product_id"`
	QtySold   int64       `json:"qty_sold"`
	Gross     int64       `json:"gross"`
}

type Order struct {
	ID                 pgtype.UUID        `json:"id"`
	UserID             pgtype.UUID        `json:"user_id"`
	CartID             pgtype.UUID        `json:"cart_id"`
	Status             OrderStatus        `json:"status"`
	Currency           string             `json:"currency"`
	PricingSubtotal    int64              `json:"pricing_subtotal"`
	PricingDiscount    int64              `json:"pricing_discount"`
	PricingTax         int64              `json:"pricing_tax"`
	PricingShipping    int64              `json:"pricing_shipping"`
	PricingTotal       int64              `json:"pricing_total"`
	ShippingAddress    []byte             `json:"shipping_address"`
	ShippingOption     []byte             `json:"shipping_option"`
	Notes              pgtype.Text        `json:"notes"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
	UpdatedAt          pgtype.Timestamptz `json:"updated_at"`
	AppliedVoucherCode pgtype.Text        `json:"applied_voucher_code"`
}

type OrderItem struct {
	ID        pgtype.UUID `json:"id"`
	OrderID   pgtype.UUID `json:"order_id"`
	ProductID pgtype.UUID `json:"product_id"`
	VariantID pgtype.UUID `json:"variant_id"`
	Title     string      `json:"title"`
	Slug      string      `json:"slug"`
	Qty       int32       `json:"qty"`
	UnitPrice int64       `json:"unit_price"`
	Subtotal  int64       `json:"subtotal"`
}

type PasswordReset struct {
	ID        pgtype.UUID        `json:"id"`
	UserID    pgtype.UUID        `json:"user_id"`
	Token     string             `json:"token"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
	UsedAt    pgtype.Timestamptz `json:"used_at"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type Payment struct {
	ID              pgtype.UUID        `json:"id"`
	OrderID         pgtype.UUID        `json:"order_id"`
	Provider        pgtype.Text        `json:"provider"`
	Status          PaymentStatus      `json:"status"`
	ProviderPayload []byte             `json:"provider_payload"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	Channel         pgtype.Text        `json:"channel"`
	IntentToken     pgtype.Text        `json:"intent_token"`
	RedirectUrl     pgtype.Text        `json:"redirect_url"`
	Amount          pgtype.Int8        `json:"amount"`
	ExpiresAt       pgtype.Timestamptz `json:"expires_at"`
}

type PaymentEvent struct {
	ID        pgtype.UUID        `json:"id"`
	PaymentID pgtype.UUID        `json:"payment_id"`
	Status    PaymentStatus      `json:"status"`
	Payload   []byte             `json:"payload"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type Product struct {
	ID         pgtype.UUID        `json:"id"`
	Title      string             `json:"title"`
	Slug       string             `json:"slug"`
	BrandID    pgtype.UUID        `json:"brand_id"`
	CategoryID pgtype.UUID        `json:"category_id"`
	Price      int64              `json:"price"`
	CompareAt  pgtype.Int8        `json:"compare_at"`
	InStock    bool               `json:"in_stock"`
	Thumbnail  pgtype.Text        `json:"thumbnail"`
	Badges     []string           `json:"badges"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

type ProductImage struct {
	ID        pgtype.UUID `json:"id"`
	ProductID pgtype.UUID `json:"product_id"`
	Url       string      `json:"url"`
	SortOrder int32       `json:"sort_order"`
}

type ProductSpec struct {
	ID        pgtype.UUID `json:"id"`
	ProductID pgtype.UUID `json:"product_id"`
	Key       string      `json:"key"`
	Value     string      `json:"value"`
}

type ProductVariant struct {
	ID         pgtype.UUID `json:"id"`
	ProductID  pgtype.UUID `json:"product_id"`
	Sku        pgtype.Text `json:"sku"`
	Price      int64       `json:"price"`
	Stock      int32       `json:"stock"`
	Attributes []byte      `json:"attributes"`
}

type Session struct {
	ID           pgtype.UUID        `json:"id"`
	UserID       pgtype.UUID        `json:"user_id"`
	RefreshToken string             `json:"refresh_token"`
	UserAgent    pgtype.Text        `json:"user_agent"`
	Ip           pgtype.Text        `json:"ip"`
	ExpiresAt    pgtype.Timestamptz `json:"expires_at"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
}

type Shipment struct {
	ID             pgtype.UUID        `json:"id"`
	OrderID        pgtype.UUID        `json:"order_id"`
	Status         ShipmentStatus     `json:"status"`
	Courier        pgtype.Text        `json:"courier"`
	TrackingNumber pgtype.Text        `json:"tracking_number"`
	History        []byte             `json:"history"`
	LastStatus     NullShipmentStatus `json:"last_status"`
	LastEventAt    pgtype.Timestamptz `json:"last_event_at"`
}

type ShipmentEvent struct {
	ID          pgtype.UUID        `json:"id"`
	ShipmentID  pgtype.UUID        `json:"shipment_id"`
	Status      ShipmentStatus     `json:"status"`
	Description pgtype.Text        `json:"description"`
	Location    pgtype.Text        `json:"location"`
	OccurredAt  pgtype.Timestamptz `json:"occurred_at"`
	RawPayload  []byte             `json:"raw_payload"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

type User struct {
	ID           pgtype.UUID        `json:"id"`
	Name         string             `json:"name"`
	Email        string             `json:"email"`
	PasswordHash string             `json:"password_hash"`
	Roles        []string           `json:"roles"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

type Voucher struct {
	ID           pgtype.UUID        `json:"id"`
	Code         string             `json:"code"`
	Value        int64              `json:"value"`
	MinSpend     int64              `json:"min_spend"`
	UsageLimit   pgtype.Int4        `json:"usage_limit"`
	UsedCount    int32              `json:"used_count"`
	ValidFrom    pgtype.Timestamptz `json:"valid_from"`
	ValidTo      pgtype.Timestamptz `json:"valid_to"`
	ProductIds   []pgtype.UUID      `json:"product_ids"`
	CategoryIds  []pgtype.UUID      `json:"category_ids"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
	Kind         DiscountKind       `json:"kind"`
	PercentBps   pgtype.Int4        `json:"percent_bps"`
	Combinable   bool               `json:"combinable"`
	Priority     int32              `json:"priority"`
	PerUserLimit pgtype.Int4        `json:"per_user_limit"`
	BrandIds     []pgtype.UUID      `json:"brand_ids"`
}

type VoucherUsage struct {
	ID        pgtype.UUID        `json:"id"`
	VoucherID pgtype.UUID        `json:"voucher_id"`
	UserID    pgtype.UUID        `json:"user_id"`
	OrderID   pgtype.UUID        `json:"order_id"`
	UsedAt    pgtype.Timestamptz `json:"used_at"`
	Amount    int64              `json:"amount"`
}

type WebhookDelivery struct {
	ID             pgtype.UUID        `json:"id"`
	EndpointID     pgtype.UUID        `json:"endpoint_id"`
	EventID        pgtype.UUID        `json:"event_id"`
	Status         DeliveryStatus     `json:"status"`
	Attempt        int32              `json:"attempt"`
	MaxAttempt     int32              `json:"max_attempt"`
	NextAttemptAt  pgtype.Timestamptz `json:"next_attempt_at"`
	LastError      pgtype.Text        `json:"last_error"`
	ResponseStatus pgtype.Int4        `json:"response_status"`
	ResponseBody   pgtype.Text        `json:"response_body"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
}

type WebhookDlq struct {
	ID         pgtype.UUID        `json:"id"`
	DeliveryID pgtype.UUID        `json:"delivery_id"`
	Reason     pgtype.Text        `json:"reason"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
}

type WebhookEndpoint struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	Url       string             `json:"url"`
	Secret    string             `json:"secret"`
	Active    bool               `json:"active"`
	Topics    []string           `json:"topics"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}
