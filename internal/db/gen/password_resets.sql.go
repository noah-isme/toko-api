// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: password_resets.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPasswordReset = `-- name: CreatePasswordReset :one
INSERT INTO password_resets (user_id, token, expires_at)
VALUES ($1, $2, $3)
RETURNING id, user_id, token, expires_at, used_at, created_at
`

type CreatePasswordResetParams struct {
	UserID    pgtype.UUID        `json:"user_id"`
	Token     string             `json:"token"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreatePasswordReset(ctx context.Context, arg CreatePasswordResetParams) (PasswordReset, error) {
	row := q.db.QueryRow(ctx, createPasswordReset, arg.UserID, arg.Token, arg.ExpiresAt)
	var i PasswordReset
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.UsedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deletePasswordReset = `-- name: DeletePasswordReset :exec
DELETE FROM password_resets
WHERE id = $1
`

func (q *Queries) DeletePasswordReset(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePasswordReset, id)
	return err
}

const deletePasswordResetsByUser = `-- name: DeletePasswordResetsByUser :exec
DELETE FROM password_resets
WHERE user_id = $1
`

func (q *Queries) DeletePasswordResetsByUser(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePasswordResetsByUser, userID)
	return err
}

const getPasswordResetByToken = `-- name: GetPasswordResetByToken :one
SELECT id, user_id, token, expires_at, used_at, created_at
FROM password_resets
WHERE token = $1
LIMIT 1
`

func (q *Queries) GetPasswordResetByToken(ctx context.Context, token string) (PasswordReset, error) {
	row := q.db.QueryRow(ctx, getPasswordResetByToken, token)
	var i PasswordReset
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.UsedAt,
		&i.CreatedAt,
	)
	return i, err
}

const markPasswordResetUsed = `-- name: MarkPasswordResetUsed :exec
UPDATE password_resets
SET used_at = now()
WHERE id = $1 AND used_at IS NULL
`

func (q *Queries) MarkPasswordResetUsed(ctx context.Context, id pgtype.UUID) error {
        _, err := q.db.Exec(ctx, markPasswordResetUsed, id)
        return err
}

const usePasswordReset = `-- name: UsePasswordReset :exec
UPDATE password_resets
SET used_at = now()
WHERE token = $1 AND used_at IS NULL
`

func (q *Queries) UsePasswordReset(ctx context.Context, token string) error {
        _, err := q.db.Exec(ctx, usePasswordReset, token)
        return err
}
